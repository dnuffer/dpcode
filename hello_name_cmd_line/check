#!/bin/bash
set -x
set -e
export PATH=.:$PATH

# --name
echo "Running: $* --name \"Dan\""
out=$($* --name "Dan")
[[ "$out" = "Hello, Dan" ]] || { printf "Failure\nExpected: Hello, Dan\nGot     : %s\n" "$out"; exit 1; }

# -n
echo "Running: $* -n \"Jiro\""
out=$($* -n "Jiro")
[[ "$out" = "Hello, Jiro" ]] || { printf "Failure\nExpected: Hello, Jiro\nGot     : %s\n" "$out"; exit 1; }

check_error()
{
	[[ $rv -ne 0 ]] || { printf "Failure\nExpected exit status: 1\nGot exit status     : %d\n" $rv; exit 1; }
	[[ $out =~ (scratch|solution):  ]] || { printf "Failure\nExpected to find (scratch|solution):  in:\n%s" "$out"; exit 1; }
	[[ $out =~ 'Try `'(scratch|solution)" --help' for more information." ]] || { printf "Failure\nExpected to find Try \`scratch --help' for more information. in:\n%s" "$out"; exit 1; }
}

# invalid arg
echo "Running: $* --foo 2>&1"
set +e
out=$($* --foo 2>&1)
rv=$?
check_error
set -e

# missing value
echo "Running: $* --name 2>&1"
set +e
out=$($* --name 2>&1)
rv=$?
check_error
set -e

# no args
echo "Running: $* 2>&1"
set +e
out=$($* 2>&1)
rv=$?
check_error
set -e

# --help
out=$($* --help 2>&1)
function check_usage()
{
	[[ $out =~ [Uu]sage:.*(scratch|solution)\ \[(options|OPTIONS)\] ]] || { printf "Failure\nExpected to find Usage: scratch [options] in:\n%s" "$out"; exit 1; }
	[[ $out =~ -name ]] || { printf "Failure\nExpected to find -name in:\n%s" "$out"; exit 1; }
	[[ $out =~ -help ]] || { printf "Failure\nExpected to find -help in:\n%s" "$out"; exit 1; }
	[[ $out =~ -n ]] || { printf "Failure\nExpected to find -n in:\n%s" "$out"; exit 1; }
}
check_usage

printf "Success!\n"
